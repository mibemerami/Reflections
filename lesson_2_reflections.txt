Reflection on: What happens when you initialize a repository? Why do you 
need to do it?

When you initialize a repository it creates a file named ".git", where the 
meta-data for the repo is stored. It is necessary so that git knows that 
this directory is a repo and what the status of that repo is.


Reflection on: How is the staging area different from the working directory 
and the repository? What value do you think it offers? 

I think it's usefull when you don't want to commit all of the files, in your 
working directory, or maybe not all of them at once. It gives you a little 
bit more control about what to commit.


Reflection on: How can you use the staging area to make sure you have one 
commit per logical change?

The staging area helps me to commit files separatly, so if there is a 
logical change per file, I can do a commit per logical change. If there
are more thean one logical changes in one file I don't think the staging 
area can help me. 


Reflection on: What are some situations when branches would be helpful in 
keeping your history organized? How would branches help?

Many reasons already have been named, for example: When you want to try 
something experimantal, or you want to change the design, but you first 
want to try the peaoples reaction, before establishing it officialy. 


Reflection on: How do the diagrams help you visualize the branch 
structure?

The diagrams show the branches as lines consisting of the commits. In
fact they are a visualisation of the branch structure.


Reflection on: What is the result of merging two branches together? Why do 
we represent it in the diagram the way we do?

Every commit in the history of both (or more) branches, is now reachable 
from the head of the new merged branch. The latest commit has two parents 
and contains the latest work from all merged branches.
The diagramm is supposed to show how the braches, and the commits in it, 
are first separated and indipendent from each other, and then combined.


Reflection on: What are the pros and cons of Gitâ€™s automatic merging vs. 
always doing merges manually?

Pro: Automatic merging saves a lot of time, as you get exactly the lines 
that are relevant. If you had to search the the whole dokuments threw, by 
your self would risk losing the overview.
Contra: You have to trust the program. 

